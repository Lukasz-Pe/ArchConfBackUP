#!/bin/env python

from __future__ import unicode_literals
import os, sys, argparse, textwrap, yt_dlp, json
from yt_dlp.utils import DownloadError
from subprocess import Popen, PIPE
from datetime import datetime

# from test.helper import (
#     FakeLogger,
# )

class MyLogger(object):
 def debug(self, msg):
  pass
 def warning(self, msg):
  pass
 def error(self, msg):
  print(msg)

def clear_line(n=1):
 LINE_UP = '\033[1A'
 LINE_CLEAR = '\x1b[2K'
 for i in range(n):
  print(LINE_UP, end=LINE_CLEAR)

def my_hook(d):
 if d['status'] == 'finished':
  print('Done downloading, now converting ...')
 if d['status'] == 'downloading':
  print(d['filename'], d['_percent_str'], d['_eta_str'])
  clear_line(3)

def ftxt(flist, txt):
 for fl in flist:
  if txt in fl and '.ytdl' in fl:
   return False
  if txt in fl:
   return True
 return False

def fnum(iter, ctgr):
  iter="%03d"%iter
  if ctgr !="":
    iter=iter+"_"+ctgr.strip('\n')
  return iter

data=datetime.today().strftime('%Y-%m-%d')

parser = argparse.ArgumentParser(description="Pobieracz masowy 1.2", formatter_class=argparse.RawDescriptionHelpFormatter)
parser.add_argument("-af", "--addressfile", dest="file", help="File with link to download")
parser.add_argument("-d", "--directory", dest="directory", help="Target directory to download to given as a path relative to now opened directory", default=data)
parser.add_argument("-q","--quality",dest="quality", help="Max download or available quality for download")
parser.add_argument("-a","--audio",dest="audio", help="Downloads only mp3 ignorig quality settings.", action="store_true")
parser.add_argument("-al","--album",dest="album", help="Albumname. Will be only in a  filename")
parser.add_argument("-t","--thumbnail",dest="thumbnail", help="Embed thumbnail in the sound file.", action="store_true")
parser.add_argument("-u","--user",dest="user", help="Username")
parser.add_argument("-p","--password",dest="password", help="User password")
parser.add_argument("-vp","--videopwd",dest="videopwd", help="Vide password, must be infile before link separated by space", action="store_true")
parser.add_argument("-c","--continue",dest="continue", type=int, help="Start numbering at given number (>0).")
parser.add_argument("-m","--move",dest="move", help="Move downloaded files to other directory")
parser.add_argument("-r","--retries",dest="retries", help="Number of retries for every link before giving up")

if len(sys.argv)==1:
 parser.print_help(sys.stderr)
 sys.exit(1)
args = vars(parser.parse_args())

pth=os.getcwd()+"/"+args["directory"]
fth=os.getcwd()+"/"+args["file"]
fthnd=fth+"-nd"
if not os.path.isfile(fth):
 fth=args["file"]
#ap=['/sbin/sudo','/sbin/systemctl','stop','shutdown.timer']
#app=Popen(ap, stdout=PIPE, stderr=PIPE)
#app.wait()

if not os.path.exists(pth):
 os.makedirs(pth)
if os.path.exists(pth):
 file=open(fth,'r')
 addr=file.readlines()
 flist=os.listdir(pth)
ytdl_opt={
   'outtmpl':'',
   'format':'bestvideo[height<={}]+bestaudio/best[height<={}]'.format(args["quality"],args["quality"]),
   'ignoreerrors':'True',
   'continuedl':'True',
   'nooverwrites':'True',
   "quiet": True,
   }
if args["retries"] is not None:
 ytdl_opt.update({'retries':int(args["retries"])},)
if args["quality"] is None:
 quality={'format':'best'}
 ytdl_opt.update(quality)
if args["audio"]:
 quality={'format': 'bestaudio/best',
 'postprocessors': [{
 'key': 'FFmpegExtractAudio',
 'preferredcodec': 'mp3',
 'preferredquality': '192'},
 {'key':'EmbedThumbnail'},
 {'key':'FFmpegMetadata'},]
 }
# quality={'format':'bestaudio[ext=m4a]'}
 ytdl_opt.update(quality)

if args["user"] != None:
 ytdl_opt.update({'user':'{}'.format(args["user"])})
if args["password"] != None:
 ytdl_opt.update({'password':'{}'.format(args["password"])})
if args["thumbnail"] != False:
 ytdl_opt.update({'writethumbnail':'{}'.format(args["thumbnail"])})
# ytdl_opt.update({'write_all_thumbnails':'{}'.format(args["thumbnail"])})
if args["album"] != None:
 album=args["album"]+"-"
 
i=0
if args["continue"] is not None and args["continue"] > 0:
  i=args["continue"]

video = ""
cat=""

for url in addr:
 if url.find('http')<0:
  cat=url
 else:
  cnt=fnum(i,cat)
  pwd=""
  if args["videopwd"]:
    if url.find(' ')>0:
      pwd,url=url.strip('\n').split()
      ytdl_opt.update({'videopassword':'{}'.format(pwd)})
    else:
      ytdl_opt.pop("videopassword",None)
  with yt_dlp.YoutubeDL(ytdl_opt) as ydl:
    result = ydl.extract_info(url, download=False)
  template=""
  template=template+'%(title)s'
  template=template+'.%(ext)s'
  if result is not None and 'entries' in result:
    video = result['entries']
  else:
    print("Downloading file: {}".format(cnt[:3]),"\n",result["title"])
    ytdl_opt.update({'outtmpl':'{}/{}_{}'.format(pth,cnt,template),})
    with yt_dlp.YoutubeDL(ytdl_opt) as ydl:
      ydl.download([url])
    i+=1
  for k, item in enumerate(video):
    cnt=fnum(i,cat)
    ytdl_opt.update({'outtmpl':'{}/{}_{}'.format(pth,cnt,template),})
    video = result['entries'][k]['webpage_url']
    print("Downloading file: {}".format(cnt[:3]),"\n",result['entries'][k]['title'])
    with yt_dlp.YoutubeDL(ytdl_opt) as ydl:
      ydl.download(video)
    i+=1

#if args["move"] != None:
# os.system("pod -m S")
# mvd=['/sbin/mv',pth,args["move"]+args["directory"]]
# mv=Popen(mvd, stdout=PIPE, stderr=PIPE)
# mv.wait()
# print(mvd)

#po=['/sbin/sudo','/sbin/systemctl','start','shutdown.timer']
#ppo=Popen(po, stdout=PIPE, stderr=PIPE)
#ppo.wait()
